<?php
namespace Kyrne\Shout\Listeners; use Flarum\Api\Controller; use Flarum\Api\Event\Serializing; use Flarum\Api\Event\WillGetData; use Flarum\Api\Serializer; use Flarum\Event\GetApiRelationship; use Flarum\Settings\SettingsRepositoryInterface; use Flarum\User\User; use Illuminate\Contracts\Events\Dispatcher; use Kyrne\Shout\Api\Serializers\ConversationRecipientSerializer; use Kyrne\Shout\Encryption; class AddRelationships { protected $settings; public function __construct(SettingsRepositoryInterface $sp0cc41a) { $this->settings = $sp0cc41a; } public function subscribe(Dispatcher $spc940eb) { $spc940eb->listen(GetApiRelationship::class, array($this, 'getApiAttributes')); $spc940eb->listen(Serializing::class, array($this, 'prepareApiAttributes')); $spc940eb->listen(WillGetData::class, array($this, 'includeData')); } public function prepareApiAttributes(Serializing $spb2c6de) { if ($spb2c6de->isSerializer(Serializer\ForumSerializer::class)) { $spb2c6de->attributes['canMessage'] = $spb2c6de->actor->can('startConversation'); $spb2c6de->attributes['shoutOwnPassword'] = (bool) $this->settings->get('kyrne-shout.set_own_password'); $spb2c6de->attributes['shoutReturnKey'] = (bool) $this->settings->get('kyrne-shout.return_key'); } if ($spb2c6de->isSerializer(Serializer\BasicUserSerializer::class)) { $sp953fd1 = Encryption::where('user_id', $spb2c6de->model->id)->first(); $spb2c6de->attributes['PMSetup'] = (bool) Encryption::where('user_id', $spb2c6de->model->id)->exists(); $spb2c6de->attributes['PrekeysExhausted'] = (bool) $sp953fd1 ? $sp953fd1->prekeys_exhausted : false; } if ($spb2c6de->isSerializer(Serializer\CurrentUserSerializer::class)) { $sp953fd1 = Encryption::where('user_id', $spb2c6de->model->id)->first(); $spb2c6de->attributes['unreadMessages'] = $spb2c6de->model->unread_messages; $sp953fd1 ? $spb2c6de->attributes['PrekeyIndex'] = $sp953fd1->prekey_index : 0; } } public function getApiAttributes(GetApiRelationship $spb2c6de) { if ($spb2c6de->isRelationship(Serializer\CurrentUserSerializer::class, 'conversations')) { return $spb2c6de->serializer->hasMany($spb2c6de->model, ConversationRecipientSerializer::class, 'conversations'); } } public function includeData(WillGetData $spb2c6de) { if ($spb2c6de->isController(Controller\ListUsersController::class) || $spb2c6de->isController(Controller\ShowUserController::class) || $spb2c6de->isController(Controller\CreateUserController::class) || $spb2c6de->isController(Controller\UpdateUserController::class)) { $spb2c6de->addInclude(array('conversations')); } } }