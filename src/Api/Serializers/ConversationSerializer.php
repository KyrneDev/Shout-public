<?php
namespace Kyrne\Shout\Api\Serializers; use Flarum\Api\Serializer\AbstractSerializer; use Kyrne\Shout\Conversation; class ConversationSerializer extends AbstractSerializer { protected $type = 'conversations'; protected function getDefaultAttributes($sp12718f) { if (!$sp12718f instanceof Conversation) { throw new \InvalidArgumentException(get_class($this) . ' can only serialize instances of ' . Conversation::class); } return array('status' => json_decode($sp12718f->status), 'createdAt' => $this->formatDate($sp12718f->created_at), 'updatedAt' => $this->formatDate($sp12718f->created_at), 'totalMessages' => $sp12718f->total_messages, 'notNew' => (bool) $sp12718f->notNew, 'unReadCount' => $sp12718f->messages()->get()->filter(function ($sp2a3d03) { if (!$sp2a3d03->is_seen) { return $sp2a3d03; } })->count()); } protected function messages($sp12718f) { return $this->hasMany($sp12718f, MessageSerializer::class); } protected function recipients($sp12718f) { return $this->hasMany($sp12718f, ConversationRecipientSerializer::class); } }