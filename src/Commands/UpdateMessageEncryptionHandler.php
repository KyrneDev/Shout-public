<?php
namespace Kyrne\Shout\Commands; use Flarum\User\Exception\PermissionDeniedException; use Flarum\User\User; use Kyrne\Shout\Conversation; use Kyrne\Shout\ConversationUser; use Kyrne\Shout\Message; class UpdateMessageEncryptionHandler { public function handle(UpdateMessageEncryption $sp6a6b12) { $spd4bab0 = $sp6a6b12->actor; $sp2b7469 = $sp6a6b12->data; $sp55dba7 = $sp6a6b12->messageId; $sp2a3d03 = Message::findOrFail($sp55dba7); $sp12718f = Conversation::findOrFail($sp2a3d03->conversation_id); if (!$sp12718f->recipients()->where('user_id', $spd4bab0->id)->get()) { throw new PermissionDeniedException(); } $sp79d3df = $spd4bab0->id; $sp37c7d3 = json_decode($sp2a3d03->message); $sp37c7d3->{$sp79d3df} = $sp2b7469['message']; $sp2a3d03->message = json_encode($sp37c7d3); ConversationUser::where(array(array('user_id', $spd4bab0->id), array('conversation_id', $sp12718f->id)))->update(array('cipher' => $sp2b7469['encryptedCipher'])); $spaed86c = User::find($spd4bab0->id); if ($spaed86c->unread_messages > 0) { $spaed86c->decrement('unread_messages'); } $sp2a3d03->save(); $spd73b45 = $spd4bab0->id; $sp2a3d03->message = json_decode($sp2a3d03->message)->{$spd73b45}; return $sp2a3d03; } }